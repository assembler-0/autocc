#!/bin/bash
# GNU install clone script
# Usage: install <file> [--link|--auto]
# Default: copies file to /usr/local/bin
# --link: creates symbolic link instead of copying
# --auto: auto-detects bin path using 'which' command

set -euo pipefail

# Function to show usage
show_usage() {
    echo "Usage: $0 <file> [--link|--auto]"
    echo ""
    echo "Options:"
    echo "  (default)  Copy file to /usr/local/bin"
    echo "  --link     Create symbolic link instead of copying"
    echo "  --auto     Auto-detect bin path using existing commands"
    echo ""
    echo "Examples:"
    echo "  $0 myscript              # Copy to /usr/local/bin/myscript"
    echo "  $0 myscript --link       # Link to /usr/local/bin/myscript"
    echo "  $0 myscript --auto       # Auto-detect path and copy"
    exit 1
}

# Function to auto-detect bin path
auto_detect_path() {
    # Try to find a common command and extract its directory
    local test_commands=("ls" "cat" "echo" "sh" "which")

    for cmd in "${test_commands[@]}"; do
        # shellcheck disable=SC2155
        local cmd_path=$(which "$cmd" 2>/dev/null || true)
        if [[ -n "$cmd_path" && -x "$cmd_path" ]]; then
            # shellcheck disable=SC2155
            local bin_dir=$(dirname "$cmd_path")
            if [[ -w "$bin_dir" ]] || [[ $(id -u) -eq 0 ]]; then
                echo "$bin_dir"
                return 0
            fi
        fi
    done

    # Fallback paths to try
    local fallback_paths=("/usr/local/bin" "/usr/bin" "/bin")

    for path in "${fallback_paths[@]}"; do
        if [[ -d "$path" && (-w "$path" || $(id -u) -eq 0) ]]; then
            echo "$path"
            return 0
        fi
    done

    echo "Error: Could not find a suitable bin directory" >&2
    return 1
}

# Check arguments
if [[ $# -eq 0 ]]; then
    show_usage
fi

SOURCE_FILE="$1"
MODE="copy"  # default mode
TARGET_DIR="/usr/local/bin"  # default directory

# Parse options
if [[ $# -eq 2 ]]; then
    case "$2" in
        --link)
            MODE="link"
            ;;
        --auto)
            MODE="auto"
            TARGET_DIR=$(auto_detect_path)
            # shellcheck disable=SC2181
            if [[ $? -ne 0 ]]; then
                exit 1
            fi
            ;;
        *)
            echo "Error: Unknown option '$2'" >&2
            show_usage
            ;;
    esac
elif [[ $# -gt 2 ]]; then
    echo "Error: Too many arguments" >&2
    show_usage
fi

# Validate source file
if [[ ! -f "$SOURCE_FILE" ]]; then
    echo "Error: Source file '$SOURCE_FILE' does not exist" >&2
    exit 1
fi

# Make source file executable if it isn't already
if [[ ! -x "$SOURCE_FILE" ]]; then
    echo "Making '$SOURCE_FILE' executable..."
    chmod +x "$SOURCE_FILE"
fi

# Get absolute path of source file
SOURCE_FILE=$(realpath "$SOURCE_FILE")
FILENAME=$(basename "$SOURCE_FILE")
TARGET_PATH="$TARGET_DIR/$FILENAME"

# Check if target directory exists and is writable
if [[ ! -d "$TARGET_DIR" ]]; then
    echo "Error: Target directory '$TARGET_DIR' does not exist" >&2
    exit 1
fi

if [[ ! -w "$TARGET_DIR" && $(id -u) -ne 0 ]]; then
    echo "Error: No write permission to '$TARGET_DIR'. Try running with sudo." >&2
    exit 1
fi

# Remove existing target if it exists
if [[ -e "$TARGET_PATH" || -L "$TARGET_PATH" ]]; then
    echo "Removing existing '$TARGET_PATH'..."
    rm -f "$TARGET_PATH"
fi

# Perform the installation
case "$MODE" in
    copy|auto)
        echo "Copying '$SOURCE_FILE' to '$TARGET_PATH'..."
        cp "$SOURCE_FILE" "$TARGET_PATH"
        chmod +x "$TARGET_PATH"
        ;;
    link)
        echo "Creating symbolic link '$TARGET_PATH' -> '$SOURCE_FILE'..."
        ln -sf "$SOURCE_FILE" "$TARGET_PATH"
        ;;
esac

echo "Successfully installed '$FILENAME' to '$TARGET_DIR'"

# Verify installation
if [[ -x "$TARGET_PATH" ]]; then
    echo "Installation verified: '$FILENAME' is executable"

    # Check if target directory is in PATH
    if [[ ":$PATH:" == *":$TARGET_DIR:"* ]]; then
        echo "✓ '$TARGET_DIR' is in your PATH"
    else
        echo "⚠ Warning: '$TARGET_DIR' is not in your PATH"
        echo "  You may need to add it to your PATH or use the full path: $TARGET_PATH"
    fi
else
    echo "Error: Installation failed - target is not executable" >&2
    exit 1
fi